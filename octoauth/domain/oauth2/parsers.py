from fastapi import Query

from octoauth.domain.oauth2.dtos import (
    AuthorizeQueryParams,
    ChallengeMethod,
    ResponseType,
    TokenRequestDTO,
    TokenRequestWithAuthorizationCodeDTO,
    TokenRequestWithClientCredentialsDTO,
    TokenRequestWithRefreshTokenDTO,
)


class TokenRequestParser:
    """
    Helper class that provides methods to parse token requests and ensure it is complete.
    """

    @staticmethod
    def parse_authorization_code(request: TokenRequestDTO) -> TokenRequestWithAuthorizationCodeDTO:
        """
        Ensure request contains all params required in authorizaton_code request.
        """
        # structural checks
        if request.code is None:
            raise ValueError("Missing mandatory body param for flow 'authorization_code': 'code'.")
        elif request.redirect_uri is None:
            raise ValueError("Missing mandatory body param for flow 'authorization_code': 'redirect_uri'.")
        elif request.client_secret is None and request.code_verifier is None:
            raise ValueError(
                "Missing PKCE body param for flow 'authorization_code' without 'client_secret': 'code_verifier'"
            )

        return TokenRequestWithAuthorizationCodeDTO(
            client_id=request.client_id,
            client_secret=request.client_secret,
            code=request.code,
            redirect_uri=request.redirect_uri,
            code_verifier=request.code_verifier,
        )

    @staticmethod
    def parse_client_credentials(request: TokenRequestDTO) -> TokenRequestWithClientCredentialsDTO:
        """
        Ensure request contains all params required in client_credentials request.
        """
        return TokenRequestWithClientCredentialsDTO(
            client_id=request.client_id, client_secret=request.client_secret, scope=request.scope
        )

    @staticmethod
    def parse_refresh_token(request: TokenRequestDTO) -> TokenRequestWithRefreshTokenDTO:
        """
        Ensure request contains all params required in refresh_token request.
        """
        return TokenRequestWithRefreshTokenDTO(
            client_id=request.client_id,
            client_secret=request.client_secret,
            refresh_token=request.refresh_token,
            scope=request.scope,
        )


def parse_authorization_params(
    client_id: str = Query(
        ...,
        required=True,
        description="Unique identifier of your app obtained at app registration.",
    ),
    scope: str = Query(
        ...,
        required=False,
        description="Comma-separated list of scopes that your application requires to access user account.",
    ),
    redirect_uri: str = Query(
        ...,
        required=False,
        description="URL where user-agent will be redirected once user has granted authorization.",
    ),
    response_type: ResponseType = Query(
        ...,
        required=True,
        description="Type of response required by client application.",
    ),
    state: str = Query(
        None,
        description=(
            "A value that will be sent back when redirecting the user-agent"
            " to the client, used for preventing cross-site request forgery."
        ),
    ),
    code_challenge: str = Query(
        None,
        description=(
            "Challenge generated by client as defined in PKCE flow, "
            "if set, you must also provide 'code_challenge_method'."
        ),
    ),
    code_challenge_method: ChallengeMethod = Query(
        None,
        description="Method used to generate 'code_challenge' from 'code_verifier'.",
    ),
):
    return AuthorizeQueryParams(
        client_id=client_id,
        scope=scope,
        redirect_uri=redirect_uri,
        response_type=response_type,
        state=state,
        code_challenge=code_challenge,
        code_challenge_method=code_challenge_method,
    )
