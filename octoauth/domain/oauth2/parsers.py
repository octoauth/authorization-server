from fastapi import Query

from octoauth.domain.oauth2.dtos import (
    AuthorizeQueryParams,
    ChallengeMethod,
    ResponseType,
)


def parse_authorization_params(
    client_id: str = Query(
        ...,
        required=True,
        description="Unique identifier of your app obtained at app registration.",
    ),
    scope: str = Query(
        ...,
        required=False,
        description="Comma-separated list of scopes that your application requires to access user account.",
    ),
    redirect_uri: str = Query(
        ...,
        required=False,
        description="URL where user-agent will be redirected once user has granted authorization.",
    ),
    response_type: ResponseType = Query(
        ...,
        required=True,
        description="Type of response required by client application.",
    ),
    state: str = Query(
        None,
        description=(
            "A value that will be sent back when redirecting the user-agent"
            " to the client, used for preventing cross-site request forgery."
        ),
    ),
    code_challenge: str = Query(
        None,
        description=(
            "Challenge generated by client as defined in PKCE flow, "
            "if set, you must also provide 'code_challenge_method'."
        ),
    ),
    code_challenge_method: ChallengeMethod = Query(
        None,
        description="Method used to generate 'code_challenge' from 'code_verifier'.",
    ),
):
    return AuthorizeQueryParams(
        client_id=client_id,
        scope=scope,
        redirect_uri=redirect_uri,
        response_type=response_type,
        state=state,
        code_challenge=code_challenge,
        code_challenge_method=code_challenge_method,
    )
